/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DoubleNewlinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DoubleNewlinePlugin = class extends import_obsidian.Plugin {
  /**
   * This method is called when the plugin is loaded.
   * It's where you register commands, event listeners, etc.
   */
  async onload() {
    console.log("Loading Double Newline Plugin");
    this.addCommand({
      id: "insert-double-newline",
      name: "Insert double newline",
      hotkeys: [{ modifiers: [], key: "Enter" }],
      editorCallback: (editor) => {
        this.insertDoubleNewline(editor);
      }
    });
    this.addCommand({
      id: "insert-two-newlines",
      name: "Insert two newlines",
      editorCallback: (editor) => {
        this.insertDoubleNewline(editor);
      }
    });
  }
  /**
   * Insert two newlines at the current cursor position
   */
  insertDoubleNewline(editor) {
    const cursor = editor.getCursor();
    editor.replaceRange("\n\n", cursor);
    const newPosition = {
      line: cursor.line + 2,
      ch: 0
    };
    editor.setCursor(newPosition);
  }
  /**
   * This method is called when the plugin is unloaded.
   * Use it to clean up any resources or listeners if any were registered.
   */
  onunload() {
    console.log("Unloading Double Newline Plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3IsIEVkaXRvclBvc2l0aW9uIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG4vLyBEZWZpbmUgdGhlIG1haW4gY2xhc3MgZm9yIHlvdXIgcGx1Z2luLCBleHRlbmRpbmcgT2JzaWRpYW4ncyBQbHVnaW4gY2xhc3MuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEb3VibGVOZXdsaW5lUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSBwbHVnaW4gaXMgbG9hZGVkLlxuICAgICAqIEl0J3Mgd2hlcmUgeW91IHJlZ2lzdGVyIGNvbW1hbmRzLCBldmVudCBsaXN0ZW5lcnMsIGV0Yy5cbiAgICAgKi9cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIERvdWJsZSBOZXdsaW5lIFBsdWdpbicpO1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGEgY29tbWFuZCB0aGF0IHdpbGwgYmUgdHJpZ2dlcmVkIGJ5IHRoZSBFbnRlciBrZXlcbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnaW5zZXJ0LWRvdWJsZS1uZXdsaW5lJyxcbiAgICAgICAgICAgIG5hbWU6ICdJbnNlcnQgZG91YmxlIG5ld2xpbmUnLFxuICAgICAgICAgICAgaG90a2V5czogW3sgbW9kaWZpZXJzOiBbXSwga2V5OiAnRW50ZXInIH1dLFxuICAgICAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0RG91YmxlTmV3bGluZShlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBbHNvIGtlZXAgdGhlIG1hbnVhbCBjb21tYW5kIGZvciB1c2VycyB3aG8gd2FudCB0byB0cmlnZ2VyIGl0IG1hbnVhbGx5XG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2luc2VydC10d28tbmV3bGluZXMnLFxuICAgICAgICAgICAgbmFtZTogJ0luc2VydCB0d28gbmV3bGluZXMnLFxuICAgICAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0RG91YmxlTmV3bGluZShlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnQgdHdvIG5ld2xpbmVzIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgaW5zZXJ0RG91YmxlTmV3bGluZShlZGl0b3I6IEVkaXRvcikge1xuICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoJ1xcblxcbicsIGN1cnNvcik7XG4gICAgICAgIFxuICAgICAgICAvLyBNb3ZlIGN1cnNvciB0byB0aGUgcG9zaXRpb24gYWZ0ZXIgdGhlIHNlY29uZCBuZXdsaW5lXG4gICAgICAgIGNvbnN0IG5ld1Bvc2l0aW9uOiBFZGl0b3JQb3NpdGlvbiA9IHtcbiAgICAgICAgICAgIGxpbmU6IGN1cnNvci5saW5lICsgMixcbiAgICAgICAgICAgIGNoOiAwXG4gICAgICAgIH07XG4gICAgICAgIGVkaXRvci5zZXRDdXJzb3IobmV3UG9zaXRpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSBwbHVnaW4gaXMgdW5sb2FkZWQuXG4gICAgICogVXNlIGl0IHRvIGNsZWFuIHVwIGFueSByZXNvdXJjZXMgb3IgbGlzdGVuZXJzIGlmIGFueSB3ZXJlIHJlZ2lzdGVyZWQuXG4gICAgICovXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmxvYWRpbmcgRG91YmxlIE5ld2xpbmUgUGx1Z2luJyk7XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUErQztBQUcvQyxJQUFxQixzQkFBckIsY0FBaUQsdUJBQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTXBELE1BQU0sU0FBUztBQUNYLFlBQVEsSUFBSSwrQkFBK0I7QUFHM0MsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixTQUFTLENBQUMsRUFBRSxXQUFXLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQztBQUFBLE1BQ3pDLGdCQUFnQixDQUFDLFdBQW1CO0FBQ2hDLGFBQUssb0JBQW9CLE1BQU07QUFBQSxNQUNuQztBQUFBLElBQ0osQ0FBQztBQUdELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sZ0JBQWdCLENBQUMsV0FBbUI7QUFDaEMsYUFBSyxvQkFBb0IsTUFBTTtBQUFBLE1BQ25DO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTDtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBS1Esb0JBQW9CLFFBQWdCO0FBQ3hDLFVBQU0sU0FBUyxPQUFPLFVBQVU7QUFDaEMsV0FBTyxhQUFhLFFBQVEsTUFBTTtBQUdsQyxVQUFNLGNBQThCO0FBQUEsTUFDaEMsTUFBTSxPQUFPLE9BQU87QUFBQSxNQUNwQixJQUFJO0FBQUEsSUFDUjtBQUNBLFdBQU8sVUFBVSxXQUFXO0FBQUEsRUFDaEM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNQLFlBQVEsSUFBSSxpQ0FBaUM7QUFBQSxFQUNqRDtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
