/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DoubleNewlinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DoubleNewlinePlugin = class extends import_obsidian.Plugin {
  /**
   * This method is called when the plugin is loaded.
   * It's where you register commands, event listeners, etc.
   */
  async onload() {
    console.log("Loading Double Newline Plugin");
    this.addCommand({
      id: "insert-two-newlines",
      // Unique ID for the command
      name: "Insert two newlines",
      // Display name for the command in settings
      // editorCallback is a function that runs when the command is triggered in the editor.
      // It receives the current Editor instance as an argument.
      editorCallback: (editor) => {
        const cursor = editor.getCursor();
        editor.replaceRange("\n\n", cursor);
      }
    });
  }
  /**
   * This method is called when the plugin is unloaded.
   * Use it to clean up any resources or listeners if any were registered.
   */
  onunload() {
    console.log("Unloading Double Newline Plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XG5cbi8vIERlZmluZSB0aGUgbWFpbiBjbGFzcyBmb3IgeW91ciBwbHVnaW4sIGV4dGVuZGluZyBPYnNpZGlhbidzIFBsdWdpbiBjbGFzcy5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERvdWJsZU5ld2xpbmVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHBsdWdpbiBpcyBsb2FkZWQuXG4gICAgICogSXQncyB3aGVyZSB5b3UgcmVnaXN0ZXIgY29tbWFuZHMsIGV2ZW50IGxpc3RlbmVycywgZXRjLlxuICAgICAqL1xuICAgIGFzeW5jIG9ubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0xvYWRpbmcgRG91YmxlIE5ld2xpbmUgUGx1Z2luJyk7XG5cbiAgICAgICAgLy8gVGhpcyBhZGRzIGFuIGVkaXRvciBjb21tYW5kIHRoYXQgaW5zZXJ0cyB0d28gbmV3bGluZXMuXG4gICAgICAgIC8vIEl0J3MgZGVzaWduZWQgdG8gYmUgcmVtYXBwZWQgdG8gdGhlICdFbnRlcicga2V5IGJ5IHRoZSB1c2VyIGluIE9ic2lkaWFuJ3MgaG90a2V5IHNldHRpbmdzLlxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdpbnNlcnQtdHdvLW5ld2xpbmVzJywgLy8gVW5pcXVlIElEIGZvciB0aGUgY29tbWFuZFxuICAgICAgICAgICAgbmFtZTogJ0luc2VydCB0d28gbmV3bGluZXMnLCAvLyBEaXNwbGF5IG5hbWUgZm9yIHRoZSBjb21tYW5kIGluIHNldHRpbmdzXG5cbiAgICAgICAgICAgIC8vIGVkaXRvckNhbGxiYWNrIGlzIGEgZnVuY3Rpb24gdGhhdCBydW5zIHdoZW4gdGhlIGNvbW1hbmQgaXMgdHJpZ2dlcmVkIGluIHRoZSBlZGl0b3IuXG4gICAgICAgICAgICAvLyBJdCByZWNlaXZlcyB0aGUgY3VycmVudCBFZGl0b3IgaW5zdGFuY2UgYXMgYW4gYXJndW1lbnQuXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBJbnNlcnQgdHdvIG5ld2xpbmUgY2hhcmFjdGVycyBhdCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb24uXG4gICAgICAgICAgICAgICAgLy8gVGhlIGN1cnNvciB3aWxsIHRoZW4gYmUgcGxhY2VkIGFmdGVyIHRoZSBpbnNlcnRlZCBuZXdsaW5lcy5cbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKCdcXG5cXG4nLCBjdXJzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBJTVBPUlRBTlQgTk9URSBGT1IgVVNFUlM6XG4gICAgICAgIC8vIFRoaXMgcGx1Z2luIHJlZ2lzdGVycyBhIGNvbW1hbmQuIFRvIG1ha2UgaXQgdHJpZ2dlciBzcGVjaWZpY2FsbHkgd2hlbiB5b3UgaGl0ICdFbnRlcicsXG4gICAgICAgIC8vIHlvdSB3aWxsIG5lZWQgdG8gbWFudWFsbHkgcmVtYXAgdGhlICdFbnRlcicga2V5IGluIE9ic2lkaWFuJ3MgSG90a2V5cyBzZXR0aW5ncy5cbiAgICAgICAgLy8gU2VhcmNoIGZvciB0aGUgXCJJbnNlcnQgdHdvIG5ld2xpbmVzXCIgY29tbWFuZCBhbmQgYXNzaWduICdFbnRlcicgYXMgaXRzIGhvdGtleS5cbiAgICAgICAgLy8gVGhpcyB3aWxsIG92ZXJyaWRlIE9ic2lkaWFuJ3MgZGVmYXVsdCBzaW5nbGUgbmV3bGluZSBiZWhhdmlvci5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiB0aGUgcGx1Z2luIGlzIHVubG9hZGVkLlxuICAgICAqIFVzZSBpdCB0byBjbGVhbiB1cCBhbnkgcmVzb3VyY2VzIG9yIGxpc3RlbmVycyBpZiBhbnkgd2VyZSByZWdpc3RlcmVkLlxuICAgICAqL1xuICAgIG9udW5sb2FkKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnVW5sb2FkaW5nIERvdWJsZSBOZXdsaW5lIFBsdWdpbicpO1xuICAgIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBK0I7QUFHL0IsSUFBcUIsc0JBQXJCLGNBQWlELHVCQUFPO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1wRCxNQUFNLFNBQVM7QUFDWCxZQUFRLElBQUksK0JBQStCO0FBSTNDLFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBO0FBQUEsTUFDSixNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUEsTUFJTixnQkFBZ0IsQ0FBQyxXQUFtQjtBQUVoQyxjQUFNLFNBQVMsT0FBTyxVQUFVO0FBSWhDLGVBQU8sYUFBYSxRQUFRLE1BQU07QUFBQSxNQUN0QztBQUFBLElBQ0osQ0FBQztBQUFBLEVBT0w7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsV0FBVztBQUNQLFlBQVEsSUFBSSxpQ0FBaUM7QUFBQSxFQUNqRDtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
